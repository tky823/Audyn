# To create status badge per os, python-version, and torch-version, we use workflow call.
# https://github.com/orgs/community/discussions/52616

name: Tests for package and recipes
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      python-version:
        required: true
        type: string
      torch-version:
        required: true
        type: string
    secrets:
      ACCESS_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
jobs:
  package:
    name: Run package tests
    runs-on: ${{ inputs.os }}
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ inputs.python-version }}
      - name: Set up Python ${{ inputs.python-version }}
        run: |
          uv python install
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/audyn
            ~/.cache/audyn_test
          key: audyn-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            audyn-${{ runner.os }}-
      - name: Install dependencies (Windows)
        if: ${{ inputs.os == 'windows-latest' }}
        run: |
          powershell -File tests/scripts/install_windows_dependencies.ps1
      - name: Install dependencies (Ubuntu)
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: |
          . tests/scripts/free_ubuntu_disk.sh
          . tests/scripts/install_ubuntu_dependencies.sh
      - name: Install dependencies (MacOS)
        if: ${{ inputs.os == 'macos-13' || inputs.os == 'macos-latest' }}
        run: |
          . tests/scripts/install_macos_dependencies.sh
      - name: Show version of FFmpeg
        run: |
          ffmpeg -version
      - name: Overwrite torch version in pyproject.toml (Windows)
        id: windows_torch_installation
        if: ${{ inputs.os == 'windows-latest' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          pip install packaging
          python tests/scripts/overwrite_pyproject_toml.py --path pyproject.toml --torch-version ${env:TORCH_VERSION}
      - name: Overwrite torch version in pyproject.toml (Ubuntu & MacOS)
        if: steps.windows_torch_installation.conclusion == 'skipped'
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          pip install packaging
          python tests/scripts/overwrite_pyproject_toml.py --path pyproject.toml --torch-version ${TORCH_VERSION}
      - name: Install dependencies
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'
        run: |
          pip install --upgrade pip
          pip install -e ".[dev,tests]"
      - name: Install dependencies (Windows)
        if: ${{ inputs.os == 'windows-latest' }}
        run: |
          pip install soundfile
      - name: Show dependencies
        run: |
          pip list
      - name: Verify version of torch (Windows)
        id: windows_torch_verification
        if: ${{ inputs.os == 'windows-latest' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          python tests/scripts/verify_torch_version.py --torch-version ${env:TORCH_VERSION}
      - name: Verify version of torch (Ubuntu & MacOS)
        if: ${{ steps.windows_torch_verification.conclusion == 'skipped' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          python tests/scripts/verify_torch_version.py --torch-version ${TORCH_VERSION}
      - name: Show backend of torchaudio
        run: |
          python -c "import torchaudio; print(torchaudio.list_audio_backends())"
          python -c "import torchaudio; assert len(torchaudio.list_audio_backends()) > 0"
      - name: Pytest for torch.hub
        if: ${{ inputs.python-version == '3.9' && inputs.os == 'ubuntu-latest' && inputs.torch-version == '2.1.0' }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          pytest -vvv tests/torchhub/
      - name: Pytest for releasing package (Windows)
        if: ${{ inputs.os == 'windows-latest' && startsWith(github.head_ref, 'release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          MPLBACKEND: AGG
          USE_LIBUV: 0
        run: |
          pytest -vvv --log-cli-level=ERROR --cov=audyn/ --cov-report=xml --runslow -p no:faulthandler tests/package/
      - name: Pytest for updating package (Windows)
        if: ${{ inputs.os == 'windows-latest' && ! startsWith(github.head_ref, 'release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          MPLBACKEND: AGG
          USE_LIBUV: 0
        run: |
          pytest -vvv --log-cli-level=ERROR --cov=audyn/ --cov-report=xml -p no:faulthandler tests/package/
      - name: Pytest for releasing package (Ubuntu & MacOS)
        if: ${{ inputs.os != 'windows-latest' && startsWith(github.head_ref, 'release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          pytest -vvv --log-cli-level=ERROR --cov=audyn/ --cov-report=xml --runslow tests/package/
      - name: Pytest for updating package (Ubuntu & MacOS)
        if: ${{ inputs.os != 'windows-latest' && ! startsWith(github.head_ref, 'release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          pytest -vvv --log-cli-level=ERROR --cov=audyn/ --cov-report=xml tests/package/
      - name: Upload coverage reports to Codecov
        if: ${{ inputs.python-version == '3.12' && inputs.os == 'ubuntu-latest' && inputs.torch-version == '2.6.0' }}
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true
  recipes:
    name: Run recipe tests
    runs-on: ${{ inputs.os }}
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ inputs.python-version }}
      - name: Set up Python ${{ inputs.python-version }}
        run: |
          uv python install
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache/audyn
            ~/.cache/audyn_test
          key: audyn-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            audyn-${{ runner.os }}-
      - name: Install dependencies (Windows)
        if: ${{ inputs.os == 'windows-latest' }}
        run: |
          powershell -File tests/scripts/install_windows_dependencies.ps1
      - name: Install dependencies (Ubuntu)
        if: ${{ inputs.os == 'ubuntu-latest' }}
        run: |
          . tests/scripts/free_ubuntu_disk.sh
          . tests/scripts/install_ubuntu_dependencies.sh
      - name: Install dependencies (MacOS)
        if: ${{ inputs.os == 'macos-13' || inputs.os == 'macos-latest' }}
        run: |
          . tests/scripts/install_macos_dependencies.sh
      - name: Show version of FFmpeg
        run: |
          ffmpeg -version
      - name: Overwrite torch version in pyproject.toml (Windows)
        id: windows_torch_installation
        if: ${{ inputs.os == 'windows-latest' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          pip install packaging
          python tests/scripts/overwrite_pyproject_toml.py --path pyproject.toml --torch-version ${env:TORCH_VERSION}
      - name: Overwrite torch version in pyproject.toml (Ubuntu & MacOS)
        if: ${{ steps.windows_torch_installation.conclusion == 'skipped' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          pip install packaging
          python tests/scripts/overwrite_pyproject_toml.py --path pyproject.toml --torch-version ${TORCH_VERSION}
      - name: Install dependencies
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'
        run: |
          pip install --upgrade pip
          pip install -e ".[recipes]"
      - name: Install dependencies (Windows)
        if: ${{ inputs.os == 'windows-latest' }}
        run: |
          pip install soundfile
      - name: Show dependencies
        run: |
          pip list
      - name: Verify version of torch (Windows)
        id: windows_torch_verification
        if: ${{ inputs.os == 'windows-latest' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          python tests/scripts/verify_torch_version.py --torch-version ${env:TORCH_VERSION}
      - name: Verify version of torch (Ubuntu & MacOS)
        if: ${{ steps.windows_torch_verification.conclusion == 'skipped' }}
        env:
          TORCH_VERSION: ${{ inputs.torch-version }}
        run: |
          python tests/scripts/verify_torch_version.py --torch-version ${TORCH_VERSION}
      - name: Show backend of torchaudio
        run: |
          python -c "import torchaudio; print(torchaudio.list_audio_backends())"
          python -c "import torchaudio; assert len(torchaudio.list_audio_backends()) > 0"
      - name: Recipe test
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          cd tests/recipes/
          . ./test_all.sh
